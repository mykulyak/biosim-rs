use serde::Deserialize;

use crate::types;

#[derive(Debug, Deserialize)]
pub struct Config {
    pub population: u32,
    pub steps_per_generation: u32,
    pub max_generations: u32,
    pub num_threads: u32,
    pub signal_layers: u32,
    pub genome_max_length: u32,
    pub max_number_neurons: u32,
    pub point_mutation_rate: f32,
    pub gene_insertion_deletion_rate: f32,
    pub deletion_ratio: f64,
    pub kill_enable: bool,
    pub sexual_reproduction: bool,
    pub choose_parents_by_fitness: bool,
    pub population_sensor_radius: f64,
    pub signal_sensor_radius: f64,
    pub responsiveness: f64,
    pub responsiveness_curve_kfactor: u32, // 1..4
    pub long_probe_distance: u32,
    pub short_probe_barrier_distance: u32,
    pub valence_saturation_mag: f64,
    pub save_video: bool,
    pub video_stride: u32,
    pub video_save_first_frames: u32,
    pub display_scale: u32,
    pub agent_size: u32,
    pub genome_analysis_stride: u32,
    pub display_sample_genomes: u32,
    pub genome_comparison_method: u32,
    pub update_graph_log: bool,
    pub update_graph_log_stride: u32,
    pub challenge: u32,
    pub barrier_type: u32,
    pub deterministic: bool,
    pub rng_seed: u32,
    pub size_x: types::Dimension,
    pub size_y: types::Dimension,
    pub genome_initial_length_min: u32,
    pub genome_initial_length_max: u32,
    pub log_dir: String,
    pub image_dir: String,
    pub graph_log_update_command: String,
    pub parameter_change_generation_number: u32,
}

impl Config {
    pub fn new() -> Config {
        return Config {
            population: 0,
            steps_per_generation: 300,
            max_generations: 200000,
            num_threads: 4,
            signal_layers: 1,
            genome_max_length: 300,
            max_number_neurons: 5,
            point_mutation_rate: 0.001,
            gene_insertion_deletion_rate: 0.0,
            deletion_ratio: 0.5,
            kill_enable: false,
            sexual_reproduction: true,
            choose_parents_by_fitness: true,
            population_sensor_radius: 2.5,
            signal_sensor_radius: 2.0,
            responsiveness: 0.5,
            responsiveness_curve_kfactor: 2, // 1..4
            long_probe_distance: 16,
            short_probe_barrier_distance: 4,
            valence_saturation_mag: 0.5,
            save_video: true,
            video_stride: 25,
            video_save_first_frames: 2,
            display_scale: 8,
            agent_size: 4,
            genome_analysis_stride: 25,
            display_sample_genomes: 5,
            genome_comparison_method: 1,
            update_graph_log: true,
            update_graph_log_stride: 25,
            challenge: 6,
            barrier_type: 0,
            deterministic: false,
            rng_seed: 12345678,
            size_x: 128,
            size_y: 128,
            genome_initial_length_min: 24,
            genome_initial_length_max: 24,
            log_dir: String::from("./logs/"),
            image_dir: String::from("./images/"),
            graph_log_update_command: String::from(
                "/usr/bin/gnuplot --persist ./tools/graphlog.gp",
            ),
            parameter_change_generation_number: 0,
        };
    }
}
